version: '3.8'
services:
  db:
    image: postgres:latest
    volumes:
      - socks:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    container_name: db
    deploy:
      resources:
        limits:
          cpus: '0.45'
          memory: '1GB'
    healthcheck:
        test: ["CMD-SHELL", "pg_isready --dbname=mydatabase --username=user"]
        interval: 2s
        timeout: 2s
        retries: 30
    ports:
      - "5432:5432"
    networks:
      - mynetwork

  api1:
    build: 
      context: ./app
      dockerfile: Dockerfile
    hostname: api1
    environment:
      DATABASE_URL: postgresql://user:password@db/mydatabase
      PORT: 8080
    depends_on:
      db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: '0.5GB'
    volumes:
      - socks:/tmp
    ports:
      - "8080:8080"
    networks:
      - mynetwork

  api2:
    build: 
      context: ./app
      dockerfile: Dockerfile
    hostname: api2
    environment:
      DATABASE_URL: postgresql://user:password@db/mydatabase
      PORT: 8081
    depends_on:
      db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: '0.5GB'
    volumes:
      - socks:/tmp
    ports:
      - "8081:8081"
    networks:
      - mynetwork

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - socks:/tmp
      - ./logs/nginx_access.log:/var/log/nginx/access.log
      - ./logs/nginx_error.log:/var/log/nginx/error.log
    depends_on:
      api1:
        condition: service_started
      api2:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: '0.15'
          memory: '0.5GB'
    ports:
      - "9999:9999"
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge

volumes:
  socks:
